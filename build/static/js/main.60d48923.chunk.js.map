{"version":3,"sources":["components/styled-components/Navbar.js","components/Navbar.js","components/styled-components/TaskModal.js","components/TaskModal.js","components/styled-components/TaskList.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["NavWrapper","styled","div","_templateObject","NavContentContainer","_templateObject2","AddButton","button","_templateObject3","NavText","h1","_templateObject4","Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","taskModal","react_default","a","createElement","className","onClick","toggle","Component","keyframes","TaskModal_templateObject","Modal","TaskModal_templateObject2","ModalWrapper","TaskModal_templateObject3","CategoryWrapper","TaskModal_templateObject4","PriorityWrapper","_templateObject5","DescriptionWrapper","_templateObject6","InfoWrapper","_templateObject7","ButtonWrapper","_templateObject8","SubmitButton","_templateObject9","InputText","p","_templateObject10","InputBox","input","_templateObject11","height","width","TextBox","textarea","_templateObject12","SelectWrapper","select","_templateObject13","Option","option","_templateObject14","TaskModal","taskCategories","priorities","_this2","value","category","name","onChange","e","handleChange","defaultValue","disabled","hidden","map","i","key","priority","task","info","handleSubmit","TaskListWrapper","TaskList_templateObject","TaskList","JSON","stringify","taskArr","App","toggleModal","setState","event","console","log","target","defineProperty","_this$state","axios","post","complete","then","res","data","preventDefault","get","components_TaskModal","assign","components_Navbar","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60d48923.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const NavWrapper = styled.div`\n    width: 100vw;\n    height: 100px;\n    background-color: black;\n    display: flex;\n    justify-content: center;\n`\nexport const NavContentContainer = styled.div`\n    max-width: 800px;\n    width: calc(100vw - 48px);\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nexport const AddButton = styled.button`\n    width: 50px;\n    height: 50px;\n    display: flex;\n    justify-content: center;\n    border-radius: 25px;\n    border: 1px solid gray;\n    background-color: gray;\n    font-weight: bolder;\n    font-size: 18px;\n    color: white;\n    cursor: pointer;\n    &:focus {\n        outline: 0;\n    }\n`\nexport const NavText = styled.h1`\n    color: white;\n    margin: auto;\n`","import React, { Component } from 'react';\nimport {NavWrapper, AddButton, NavText, NavContentContainer} from './styled-components/Navbar';\n\n\nclass Navbar extends Component{\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            taskModal: false,\n        }\n    }\n    render(){\n        return(\n            <NavWrapper className=\"nav-wrapper\">\n                <NavContentContainer className=\"nav-content-container\">\n                    <NavText className=\"nav-text\">Workfront Todo List</NavText>\n                    <AddButton className=\"add-button\" onClick={this.props.toggle}>Add</AddButton>\n                </NavContentContainer>\n            </NavWrapper>\n        )\n    }\n}\n\nexport default Navbar;","import styled, {keyframes} from 'styled-components';\n\nconst slideIn = keyframes`\n    0% {\n    transform: translateX(0);\n    }\n    100% {\n        transform: translateX(100%);\n    }\n`\n\nexport const Modal = styled.div`\n    height: 50vh;\n    width: 50vw;\n    background-color: white;\n    border: 1px solid black;\n    position: fixed;\n    top: calc(50vh/2);\n    left: calc(-50vw);\n    box-sizing: border-box;\n    transform: ${props => props.taskModal && 'translateX(75vw)'};\n    transition: transform .3s ease-in-out;\n`\n\nexport const ModalWrapper= styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 24px;\n`\n\nexport const CategoryWrapper = styled.div`\n\n`\nexport const PriorityWrapper = styled.div`\n\n`\nexport const DescriptionWrapper = styled.div`\n\n`\nexport const InfoWrapper = styled.div`\n\n`\nexport const ButtonWrapper = styled.div`\n\n`\nexport const SubmitButton = styled.button`\n    width: 100px;\n    height: 30px;\n    border: 1px solid black;\n    border-radius: 4px;\n`\nexport const InputText = styled.p`\n    font-size: 16px;\n`\nexport const InputBox = styled.input`\n    height: ${props => props.height ? props.height : 'initial'};\n    width: ${props => props.width ? props.width : 'initial'};\n`\nexport const TextBox = styled.textarea`\n    border: 1px solid black;\n    height: ${props => props.height ? props.height : 'initial'};\n    width: ${props => props.width ? props.width : 'initial'};\n    resize: none;\n`\nexport const SelectWrapper = styled.select`\n\n`\nexport const Option = styled.option`\n\n`","import React, { Component } from 'react';\nimport {Modal, ModalForm, ModalWrapper, CategoryWrapper, DescriptionWrapper, InfoWrapper, ButtonWrapper, SubmitButton, InputText, InputBox, SelectWrapper, Option, PriorityWrapper, TextBox} from './styled-components/TaskModal';\n\nclass TaskModal extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            taskCategories: ['Work', 'Personal', 'Shopping'],\n            priorities: ['Low', 'Medium', 'High']\n        }\n    }\n\n    \n    render(){\n        return(\n            <Modal taskModal={this.props.taskModal} className=\"modal\">\n                <ModalWrapper>\n                    <CategoryWrapper>\n                        <InputText>Category: </InputText>\n                        <SelectWrapper value={this.props.category} name=\"category\" onChange={(e) => this.props.handleChange(e)}>\n                            <Option defaultValue=\"\" disabled hidden/>\n                            {this.state.taskCategories.map((e, i) => {\n                                return <Option key={i}>{e}</Option>\n                            })}\n                        </SelectWrapper>\n                    </CategoryWrapper>\n                    <PriorityWrapper>\n                        <InputText>Priority: </InputText>\n                        <SelectWrapper value={this.props.priority} name=\"priority\" onChange={(e) => this.props.handleChange(e)}>\n                            <Option defaultValue=\"\" disabled hidden/>\n                            {this.state.priorities.map((e,i) => {\n                                return <Option key={i}>{e}</Option>\n                            })}\n                        </SelectWrapper>\n                    </PriorityWrapper>\n                    <DescriptionWrapper>\n                        <InputText>Task: </InputText>\n                        <InputBox value={this.props.task} name=\"task\" width={'100%'} onChange={(e) => this.props.handleChange(e)}/>\n                    </DescriptionWrapper>\n                    <InfoWrapper>\n                        <InputText>Additional Info</InputText>\n                        <TextBox  value={this.props.info} name=\"info\" height={\"100px\"} width={'100%'} onChange={(e) => this.props.handleChange(e)}/>\n                    </InfoWrapper>\n                    <ButtonWrapper>\n                        <SubmitButton onClick={this.props.handleSubmit}>Add Task</SubmitButton>\n                    </ButtonWrapper>\n                </ModalWrapper>\n            </Modal>\n        )\n    }\n}\n\nexport default TaskModal;","import styled from 'styled-components';\n\nexport const TaskListWrapper = styled.div`\n    min-height: calc(100vh - 100px);\n    width: 100%;\n    background: lightgray;\n`","import React, { Component } from 'react';\nimport {TaskListWrapper} from './styled-components/TaskList';\n\nclass TaskList extends Component{\n    constructor(props){\n        super(props);\n\n    }\n    render(){\n        return(\n            <TaskListWrapper>\n                {JSON.stringify(this.props.taskArr)}\n            </TaskListWrapper>\n        )\n    }\n}\n\nexport default TaskList","import React, { Component } from 'react';\n// import axios from 'axios';\nimport axios from 'axios';\nimport Navbar from './components/Navbar';\nimport TaskModal from './components/TaskModal';\nimport TaskList from './components/TaskList';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        taskModal: false,\n        taskArr: [],\n        category: '',\n        priority: '',\n        task: '',\n        info: ''\n    }\n  }\n  componentDidMount(){\n      axios.get('/getDataArr').then(res => this.setState({taskArr: res.data}))\n  }\n\n  toggleModal = () => this.setState({taskModal: !this.state.taskModal})\n\n  handleChange = (event) => {\n      console.log(event.target.name);\n      this.setState({[event.target.name]: event.target.value});\n    }\n\n  handleSubmit = (event) => {\n        let {category, priority, info, task, taskArr} = this.state;\n        console.log(category, priority, info, task);\n        axios.post('/addTask', {category, priority, info, task, complete: false}).then(res => {\n            this.setState({\n                taskArr: res.data,\n                category: '',\n                priority: '',\n                info: '',\n                task: ''\n            })\n        })\n        this.toggleModal();\n        event.preventDefault();\n  }\n\n  render(){\n        return(\n        <div className=\"App\">\n            <TaskModal {...this.state} toggle={this.toggleModal} handleChange={this.handleChange} handleSubmit={this.handleSubmit} className=\"task-modal\"/>\n            <Navbar className=\"navbar\" toggle={this.toggleModal}/>\n            <TaskList taskArr={this.state.taskArr}/>\n        </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}