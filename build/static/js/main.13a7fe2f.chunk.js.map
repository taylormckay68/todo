{"version":3,"sources":["components/styled-components/Navbar.js","components/Navbar.js","components/styled-components/TaskModal.js","components/TaskModal.js","components/styled-components/TaskList.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["NavWrapper","styled","div","_templateObject","AddButton","button","_templateObject2","Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","taskModal","react_default","a","createElement","className","onClick","toggle","Component","keyframes","TaskModal_templateObject","ModalWrapper","TaskModal_templateObject2","TaskModal","taskCategories","_this2","onSubmit","handleSubmit","value","category","name","onChange","e","handleChange","defaultValue","disabled","hidden","map","i","key","description","info","type","TaskListWrapper","TaskList_templateObject","TaskList","JSON","stringify","taskArr","App","toggleModal","setState","event","defineProperty","target","_this$state","axios","post","complete","then","res","data","preventDefault","get","components_TaskModal","assign","components_Navbar","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13a7fe2f.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const NavWrapper = styled.div`\n    width: 100vw;\n    height: 200px;\n    background-color: pink;\n`\n\nexport const AddButton = styled.button`\n    width: 75px;\n    height: 25px;\n    background-color: gray;\n    cursor: pointer;\n    &:focus {\n        outline: 0;\n    }\n`","import React, { Component } from 'react';\nimport {NavWrapper, AddButton} from './styled-components/Navbar';\n\n\nclass Navbar extends Component{\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            taskModal: false,\n        }\n    }\n    render(){\n        return(\n            <NavWrapper className=\"nav-wrapper\">\n                <AddButton className=\"add-button\" onClick={this.props.toggle}>Add</AddButton>\n            </NavWrapper>\n        )\n    }\n}\n\nexport default Navbar;","import styled, {keyframes} from 'styled-components';\n\nconst slideIn = keyframes`\n    0% {\n    transform: translateX(0);\n    }\n    100% {\n        transform: translateX(100%);\n    }\n`\n\nexport const ModalWrapper = styled.div`\n    height: 50vh;\n    width: 50vw;\n    background-color: white;\n    border: 1px solid black;\n    position: fixed;\n    top: calc(50vh/2);\n    left: calc(-50vw);\n    box-sizing: border-box;\n    transform: ${props => props.taskModal && 'translateX(75vw)'};\n    transition: transform .3s ease-in-out;\n`","import React, { Component } from 'react';\nimport {ModalWrapper} from './styled-components/TaskModal';\n\nclass TaskModal extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            taskCategories: ['Work', 'Personal', 'Shopping']\n        }\n    }\n\n    \n    render(){\n        // console.log('state: ', this.props);\n        return(\n            <ModalWrapper taskModal={this.props.taskModal} className=\"modal-wrapper\">\n                <form onSubmit={this.props.handleSubmit}>\n                    <label>\n                    Catgory:\n                        <select value={this.props.category} name=\"category\" onChange={(e) => this.props.handleChange(e)}>\n                            <option defaultValue=\"\" disabled hidden></option>\n                            {this.state.taskCategories.map((e, i) =>{\n                                return(\n                                    <option key={i}>{e}</option>\n                                )\n                            })}\n                        </select>\n                    </label>\n                    <label>\n                        Description:\n                        <input name=\"description\" value={this.props.description} onChange={e => this.props.handleChange(e)}></input>\n                    </label>\n                    <label>\n                        Additional Info:\n                        <textarea name=\"info\" value={this.props.info} onChange={(e) => this.props.handleChange(e)}></textarea>   \n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n            </ModalWrapper>\n        )\n    }\n}\n\nexport default TaskModal;","import styled from 'styled-components';\n\nexport const TaskListWrapper = styled.div`\n    min-height:400px;\n    width: 100%;\n    background: lightgray;\n`","import React, { Component } from 'react';\nimport {TaskListWrapper} from './styled-components/TaskList';\n\nclass TaskList extends Component{\n    constructor(props){\n        super(props);\n\n    }\n    render(){\n        return(\n            <TaskListWrapper>\n                {JSON.stringify(this.props.taskArr)}\n            </TaskListWrapper>\n        )\n    }\n}\n\nexport default TaskList","import React, { Component } from 'react';\n// import axios from 'axios';\nimport axios from 'axios';\nimport Navbar from './components/Navbar';\nimport TaskModal from './components/TaskModal';\nimport TaskList from './components/TaskList';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        taskModal: false,\n        taskArr: [],\n        category: '',\n        description: '',\n        info: ''\n    }\n  }\n  componentDidMount(){\n      axios.get('/getDataArr').then(res => this.setState({taskArr: res.data}))\n  }\n\n  toggleModal = () => this.setState({taskModal: !this.state.taskModal})\n\n  handleChange = (event) => {\n      this.setState({[event.target.name]: event.target.value});\n    }\n\n  handleSubmit = (event) => {\n        let {category, info, description, taskArr} = this.state;\n        axios.post('/addTask', {category, info, description, complete: false}).then(res => {\n            this.setState({\n                taskArr: res.data,\n                category: '',\n                info: '',\n                description: ''\n            })\n        })\n        this.toggleModal();\n        event.preventDefault();\n  }\n\n  render(){\n        return(\n        <div className=\"App\">\n            <TaskModal {...this.state} toggle={this.toggleModal} handleChange={this.handleChange} handleSubmit={this.handleSubmit} className=\"task-modal\"/>\n            <Navbar className=\"navbar\" toggle={this.toggleModal}/>\n            <TaskList taskArr={this.state.taskArr}/>\n        </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}